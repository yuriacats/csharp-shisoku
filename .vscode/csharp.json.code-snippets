{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"[shisoku] AST Sucsess Function Case": {
		"prefix": "fact",
		"body": [
			"[Fact]",
			"    public void ${1:FunctionNames}()",
			"    {",
			"        var inputToken = new List<Token>{",
			"            ${2: input Tokens}",
			"        };",
			"        var expectedAst = new FunctionExpression(${3:expected AST Expressions})",
			"        });",
			"        (var result, _) = ParseExpression.parse(inputToken.ToArray());",
			"        switch (result)",
			"        {",
			"            case FunctionExpression(var arguments, var body):",
			"                Console.WriteLine(String.Join<Statement>(',', body));",
			"                Assert.Equal(expectedAst.body, body);",
			"                Assert.Equal(expectedAst.argumentNames, arguments);",
			"                break;",
			"",
			"            default:",
			"                Assert.Fail(\"result is not make FunctionExpression\");",
			"                break;",
			"        }",
		],
		"description": "make AST Tests"
	},
	"[shisoku] AST Fail Case": {
		"prefix": "fact",
		"body": [
			"[Fact]",
			"    public void ${1:FunctionHoge}()",
			"    {",
			"        var inputToken = new List<Token>{",
			"            ${2:new HogeToken(),}",
			"        };",
			"        Assert.Throws<Exception>(() => ParseExpression.parse(inputToken.ToArray()));",
			"    }",
			"",
			""
		],
		"description": "If you want to fail in ParserTest, use this"
	}
}
